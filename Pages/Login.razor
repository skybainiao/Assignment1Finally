@page "/login"
@namespace LoginComponent
@using LoginExample.Authentication

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<AuthorizeView>
    <NotAuthorized>
        <div style="left: 44%; right: 50%; margin-top: 100px; position: absolute; color: white">
            
            <h1>Login</h1>
            <br>
            <div class="form-group">
                <label>Username:</label>
                <input style="border-radius: 10px" type="text" placeholder="user name" @bind-value="username"/>
            </div>
            <div class="form-group">
                <label>Password:</label>
                <input style="border-radius: 10px" type="password" placeholder="password" @bind-value="password"/>
            </div>
            <div style="color:red">@errorMessage</div>
            <button type="submit" class="login-button" @onclick="PerformLogin">Log in</button>
            
        </div>

    </NotAuthorized>
    
     
   
    
    <Authorized>
        <a href="" @onclick="PerformLogout" style="color: white">
            Log out
        </a>
        @if (true)
                {
                    NavigationManager.NavigateTo("/");
                }
    </Authorized>
</AuthorizeView>

@code {
    private string username;
    private string password;
    private string errorMessage;

    public async Task PerformLogin() {
        errorMessage = "";
        try {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(username, password);
            username = "";
            password = "";
        } catch (Exception e) {
            errorMessage = e.Message;
        }
    }

    public async Task PerformLogout() {
        errorMessage = "";
        username = "";
        password = "";
        try {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        } catch (Exception e) { }
    }

}